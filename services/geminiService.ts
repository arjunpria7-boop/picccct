/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
*/
import { GoogleGenAI, Modality } from "@google/genai";

// WARNING: Hardcoding API keys in client-side code is a major security risk.
// This key is visible to anyone inspecting the site's code.
// This is done only per direct and repeated user request.
const API_KEY = "AIzaSyDdVMVSj5ZFGtpm9gJ2GATOp-sjwqIBfA4";

const ai = new GoogleGenAI({ apiKey: API_KEY });

// Helper to convert a File object to a GoogleGenerativeAI.Part object.
const fileToGenerativePart = async (file: File) => {
  const base64EncodedDataPromise = new Promise<string>((resolve) => {
    const reader = new FileReader();
    reader.onloadend = () => resolve((reader.result as string).split(',')[1]);
    reader.readAsDataURL(file);
  });
  return {
    inlineData: { data: await base64EncodedDataPromise, mimeType: file.type },
  };
};

/**
 * Generates an image using the Gemini API based on an input image and a text prompt.
 * @param imageFile The initial image file.
 * @param prompt The text prompt describing the desired edit.
 * @returns A data URL for the generated image.
 */
export const generateImageWithPrompt = async (imageFile: File, prompt: string): Promise<string> => {
  try {
    const imagePart = await fileToGenerativePart(imageFile);
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
          parts: [imagePart, textPart],
        },
        config: {
            responseModalities: [Modality.IMAGE],
        },
      });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
        }
    }
    throw new Error("No image was generated by the API.");

  } catch (error) {
    console.error("Error generating image:", error);
    let errorMessage = "An unknown error occurred while generating the image.";
    if (error instanceof Error) {
        // Provide more specific error messages for common API key issues.
        if (error.message.includes('API key not valid')) {
            errorMessage = "The provided API key is not valid. Please check your key in the Google AI Studio.";
        } else if (error.message.toLowerCase().includes('quota')) {
            errorMessage = "You have exceeded your API quota. Please check your usage limits and billing status in the Google Cloud Console.";
        } else if (error.message.includes('PERMISSION_DENIED')) {
            errorMessage = "API key permission denied. This is likely due to incorrect HTTP referrer restrictions. Please ensure your key is configured correctly for this website's domain in the Google Cloud Console.";
        } else if (error.message.includes('resource has been exhausted')) {
            errorMessage = "The service is currently overloaded or you have hit a rate limit. Please try again in a moment.";
        }
         else {
            errorMessage = `An error occurred: ${error.message}`;
        }
    }
    throw new Error(errorMessage);
  }
};
